// ! Код который перечеркнут - перенесен в другой файл
//импортируем объект и его свойства кладем в соответствующие константы
const { showAll, addNumber} = require('./library') // с помощью деструктризации 

// //импортируем пакет fs
// //Common js - импорт через require
// const fs = require('fs');
// const { EOL } = require('os'); //это автоматический импорт, ниже про него написано

// //* Форматрование контактов с помощью готового пакета
// //код взят из доки на npm
// const parsePhoneNumber = require('libphonenumber-js'); //исправили import, так как пользуемся require
//process.argv - массив с аргументами из командной строки
const command = process.argv[2];

if (command === 'show-all') {
  // //* чтение файлов
  showAll(); 
  // const text = fs.readFileSync(`${__dirname}/contacts.txt`, 'utf-8'); // прописываем путь и кодировку чтения

  // // если добавить __dirname +  - это глобальная переменная, которая хранит директорию, в которой находится текущий скрипт. Это позволяет не следить за тем, в какой папке я сейчас фактически нахожусь
  // //__dirname - это переменная, которая уже существует

  // //Если лень постоянно прописывать, то можно сделать свою функцию и использовать ее (но зачем?)
  // /* function readFileSyncUtf8(path) {
  //   return fs.readFileSync('./contacts.txt', 'utf-8')
  // } */

  // //улучшим формат читаемого файла - вывести всё по пунктам, нужно получить массивы

  // const lines = text.split(EOL); //знак переноса на разных "машинах" может отличаться, чтобы код корректно работал на любой машине, вместо \n, \r\n и т.д. можно написать EOL без кавычек, при этом добавится автоматический импорт const { EOL } = require('os');
  // //EOL = \n на Мак и линукс, \r\n на винде

  // //пройдя по строчкам и добавим нумерованный список
  // lines.forEach((line, index) => {
  //   if (line) {
  //     console.log(`${index + 1}. ${line}`);
  //   }
  // });
} else if (command === 'add') {
  //* добавление новой строки через терминал
  const name = process.argv[3]; //чтобы корректно поставить индексы, можно предварительно вывести в консоль посмотреть process.argv
  const phone = process.argv[4];
  // const parsendNumber = parsePhoneNumber(phone, 'RU'); //из пакета, переименум переменную. Тут мы распарсим номера и теперь он объект, уэтого объекта есть метод, который мы и используем
  // // parsendNumber.formatInternational() === '+1 213 373 4253'; //это пример того как выглядит нужный формат, нам эта строчка не нужна
  // const line = `${name} ${parsendNumber.formatInternational()}`; //заменили переменную phone, на спарсенный вариант

  // //всегда когда нам надо что-то сделать с файлом, то обращаемся к fs и вызываем нужный метод
  // //пишем в файл строку line / перезаписывает файл / если файла не было, то создает его.
  // //fs.writeFileSync(`${__dirname}/contacts.txt`, line); //тут кодировку уже не нужно писать, просто вставляем вторым параметром то, что хотим записать

  // //такой метод допишет файл, а не перезапишет
  // fs.appendFileSync(`${__dirname}/contacts.txt`, line + EOL); //не забывать добавлять перенос
  addNumber(name, phone);
}

//!теперь в терминал можно написать node phonebook.js add Гриша +79895643232 чтобы добвить кого-то или node phonebook.js show-all Гриша +79895643232 чтобы посмотреть весь список
